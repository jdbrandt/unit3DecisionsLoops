This was easiest the hardest project I've accomplished in code (there were harder things, but those haven't exactly been accomplished yet. However, this was also one of my least favorite projects, mainly due to a lack of information.This was the lack of actual communication on the Internet about the framework. TKinter and Pygame all had at least a decent following on places like StackExchange, but GridWorld is just dead. This led to various cases where I didn't know what on earth was going on while I could not contact you (due to me being sick or you being out of the building), leading me to give up on the project for several short periods of time as I was hitting my head against a wall unproductively (obviously figuratively), whereas with Pygame or TKinter, I could read a lot more questions about the actual framework to understand it more. The documentation was SEVERELY lacking in information, such as the wonderful function description for World.setGrid(Grid<T> newGrid): "Sets the grid managed by this world." Where is it set? This is compounded with the nigh-redundant (but redundant only in description, not in function) of methods like Actor.putSelfInGrid(Grid, Location) and Grid.put(Location, Actor), where putSelfInGrid is the only method that actually seems to work with Actor.removeSelfFromGrid(Grid, Location). One would think that if I've put something into a grid, it could remove itself from said grid quite easily, but alas. This is compounded by writing when I write code that passes when I work it through by hand, passes under several of my friends' semeingly shrewd gazes, and then fails when I actually implement it, not to mention that I can't actually run it on a school computer that I can carry around with me, forcing me to either screenshare my home computer or try to accurately and totally describe the countless errors I receive. All of this might have been fine if I knew actually what was going on, as the sensibility I had rejoiced with under the wonderful reign of Python lists was completely alien to my experience with Java ArrayLists, which I'm pretty sure are from Mars. Unlike most labs, the only thing I learned from this was that the best way to write code is to slap things in that may or may not work, not to work it all out beforehand and implement in one fell swoop. The advice I would offer to next year's students is expect to finish the project about 3 or 4 days before it is ACTUALLY due, then, assuming you aren't absent all of those 3-4 days, they may have a chance to ask you for help with nonsensical errors. 